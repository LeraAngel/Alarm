{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onChangeText\", \"value\", \"mask\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { TextInput } from 'react-native-paper';\nvar splitCharacters = ['-', '/', '.', '年', ' '];\n\nfunction detectCharacter(mask) {\n  var c = splitCharacters.find(function (ch) {\n    return mask.includes(ch);\n  });\n  return c || '';\n}\n\nfunction enhanceTextWithMask(text, mask, previousValue) {\n  var isBackSpace = previousValue.length > text.length;\n  var splitCharacter = detectCharacter(mask);\n  var maskParts = mask.split(splitCharacter);\n  var textParts = text.split(splitCharacter);\n  var finalString = [];\n\n  for (var maskPartIndex = 0; maskPartIndex < mask.length; maskPartIndex++) {\n    var partString = [];\n    var maskPart = maskParts[maskPartIndex];\n    var textPart = textParts[maskPartIndex];\n\n    if (!textPart) {\n      continue;\n    }\n\n    for (var maskDigitIndex = 0; maskDigitIndex < maskPart.length; maskDigitIndex++) {\n      var currentCharacter = textPart[maskDigitIndex];\n\n      if (isBackSpace && currentCharacter === undefined) {\n        continue;\n      }\n\n      var character = textPart[maskDigitIndex];\n\n      if (character !== undefined) {\n        partString.push(character);\n      }\n    }\n\n    finalString.push(partString.join(''));\n  }\n\n  var lastPart = finalString[finalString.length - 1];\n  var lastMaskPart = maskParts[finalString.length - 1];\n\n  if (finalString.length !== maskParts.length && lastPart && lastMaskPart && lastPart.length === lastMaskPart.length) {\n    return finalString.join(splitCharacter) + (isBackSpace ? '' : splitCharacter);\n  }\n\n  return finalString.join(splitCharacter);\n}\n\nfunction TextInputWithMask(_ref, ref) {\n  var onChangeText = _ref.onChangeText,\n      value = _ref.value,\n      mask = _ref.mask,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(value || ''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      controlledValue = _React$useState2[0],\n      setControlledValue = _React$useState2[1];\n\n  var onInnerChange = function onInnerChange(text) {\n    var enhancedText = enhanceTextWithMask(text, mask, controlledValue);\n    setControlledValue(enhancedText);\n\n    if (text.length === mask.length) {\n      onChangeText && onChangeText(text);\n    }\n  };\n\n  React.useEffect(function () {\n    setControlledValue(value || '');\n  }, [value]);\n  return React.createElement(TextInput, _extends({\n    ref: ref\n  }, rest, {\n    value: controlledValue,\n    onChangeText: onInnerChange\n  }));\n}\n\nexport default React.forwardRef(TextInputWithMask);","map":{"version":3,"sources":["TextInputMask.tsx"],"names":["splitCharacters","c","ch","mask","isBackSpace","previousValue","text","splitCharacter","detectCharacter","maskParts","textParts","finalString","maskPartIndex","partString","maskPart","textPart","maskDigitIndex","currentCharacter","character","lastPart","lastMaskPart","rest","React","value","onInnerChange","enhancedText","enhanceTextWithMask","setControlledValue","onChangeText","ref"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { TextInput } from 'react-native-paper'\n\nconst splitCharacters = ['-', '/', '.', '年', ' ']\nfunction detectCharacter(mask: string): string {\n  const c = splitCharacters.find((ch) => mask.includes(ch))\n  return c || ''\n}\n\nfunction enhanceTextWithMask(\n  text: string,\n  mask: string,\n  previousValue: string\n): string {\n  const isBackSpace = previousValue.length > text.length\n  const splitCharacter = detectCharacter(mask)\n\n  const maskParts = mask.split(splitCharacter)\n  const textParts = text.split(splitCharacter)\n\n  let finalString: string[] = []\n  for (let maskPartIndex = 0; maskPartIndex < mask.length; maskPartIndex++) {\n    let partString: string[] = []\n\n    const maskPart = maskParts[maskPartIndex]\n    const textPart = textParts[maskPartIndex]\n    if (!textPart) {\n      continue\n    }\n\n    for (\n      let maskDigitIndex = 0;\n      maskDigitIndex < maskPart.length;\n      maskDigitIndex++\n    ) {\n      const currentCharacter = textPart[maskDigitIndex]\n\n      if (isBackSpace && currentCharacter === undefined) {\n        continue\n      }\n\n      const character = textPart[maskDigitIndex]\n\n      if (character !== undefined) {\n        partString.push(character)\n      }\n    }\n\n    finalString.push(partString.join(''))\n  }\n\n  const lastPart = finalString[finalString.length - 1]\n  const lastMaskPart = maskParts[finalString.length - 1]\n  if (\n    // if mask is completed\n    finalString.length !== maskParts.length &&\n    // or ...\n    lastPart &&\n    lastMaskPart &&\n    lastPart.length === lastMaskPart.length\n  ) {\n    return (\n      finalString.join(splitCharacter) + (isBackSpace ? '' : splitCharacter)\n    )\n  }\n  return finalString.join(splitCharacter)\n}\n\nfunction TextInputWithMask(\n  {\n    onChangeText,\n    value,\n    mask,\n    ...rest\n  }: React.ComponentProps<typeof TextInput> & { mask: string },\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    value || ''\n  )\n\n  const onInnerChange = (text: string) => {\n    const enhancedText = enhanceTextWithMask(text, mask, controlledValue)\n    setControlledValue(enhancedText)\n\n    if (text.length === mask.length) {\n      onChangeText && onChangeText(text)\n    }\n  }\n\n  React.useEffect(() => {\n    setControlledValue(value || '')\n  }, [value])\n\n  return (\n    <TextInput\n      ref={ref}\n      {...rest}\n      value={controlledValue}\n      onChangeText={onInnerChange}\n    />\n  )\n}\n\nexport default React.forwardRef(TextInputWithMask)\n"]},"metadata":{},"sourceType":"module"}