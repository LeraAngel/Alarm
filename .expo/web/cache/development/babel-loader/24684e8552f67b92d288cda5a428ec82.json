{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { inputTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport AnalogClock from \"./AnalogClock\";\nimport { circleSize } from \"./timeUtils\";\nimport TimeInputs from \"./TimeInputs\";\nexport var DisplayModeContext = React.createContext({\n  mode: 'AM',\n  setMode: function setMode() {}\n});\n\nfunction TimePicker(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      onFocusInput = _ref.onFocusInput,\n      focused = _ref.focused,\n      inputType = _ref.inputType,\n      onChange = _ref.onChange,\n      locale = _ref.locale;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      displayMode = _React$useState2[0],\n      setDisplayMode = _React$useState2[1];\n\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var is24Hour = React.useMemo(function () {\n    var formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC'\n    });\n    var formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)));\n    return formatted.includes('23');\n  }, [locale]);\n  React.useEffect(function () {\n    if (hours >= 12) {\n      setDisplayMode('PM');\n    } else {\n      setDisplayMode('AM');\n    }\n  }, []);\n  var onInnerChange = React.useCallback(function (params) {\n    params.hours = toHourOutputFormat(params.hours, hours, is24Hour);\n    onChange(params);\n  }, [onChange, hours, is24Hour]);\n  return React.createElement(DisplayModeContext.Provider, {\n    value: {\n      mode: displayMode,\n      setMode: setDisplayMode\n    }\n  }, React.createElement(View, {\n    style: isLandscape ? styles.rootLandscape : styles.rootPortrait\n  }, React.createElement(TimeInputs, {\n    inputType: inputType,\n    hours: hours,\n    minutes: minutes,\n    is24Hour: is24Hour,\n    onChange: onChange,\n    onFocusInput: onFocusInput,\n    focused: focused\n  }), inputType === inputTypes.picker ? React.createElement(View, {\n    style: styles.clockContainer\n  }, React.createElement(AnalogClock, {\n    hours: toHourInputFormat(hours, is24Hour),\n    minutes: minutes,\n    focused: focused,\n    is24Hour: is24Hour,\n    onChange: onInnerChange\n  })) : null));\n}\n\nvar styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 24 * 3 + 96 * 2 + 52 + circleSize\n  },\n  rootPortrait: {},\n  clockContainer: {\n    paddingTop: 36,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\nexport default React.memo(TimePicker);","map":{"version":3,"sources":["TimePicker.tsx"],"names":["DisplayModeContext","mode","setMode","locale","React","dimensions","useWindowDimensions","isLandscape","is24Hour","formatter","Intl","hour","minute","timeZone","formatted","Date","hours","setDisplayMode","onInnerChange","params","toHourOutputFormat","onChange","styles","rootPortrait","focused","inputTypes","clockContainer","toHourInputFormat","rootLandscape","flexDirection","alignItems","justifyContent","width","circleSize","paddingTop","paddingLeft","paddingRight"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAGA,SAAA,UAAA,EAAA,iBAAA,EAAA,kBAAA;AAQA,OAAA,WAAA;AACA,SAAA,UAAA;AACA,OAAA,UAAA;AAEA,OAAO,IAAMA,kBAAkB,GAAG,KAAK,CAAL,aAAA,CAG/B;EAAEC,IAAI,EAAN,IAAA;EAAcC,OAAO,EAAE,mBAAM,CAAE;AAA/B,CAH+B,CAA3B;;AAeP,SAAA,UAAA,CAAA,IAAA,EAgBG;EAhBiB,IAAA,KAAA,GAgBjB,IAhBiB,CAAA,KAAA;EAAA,IAAA,OAAA,GAgBjB,IAhBiB,CAAA,OAAA;EAAA,IAAA,YAAA,GAgBjB,IAhBiB,CAAA,YAAA;EAAA,IAAA,OAAA,GAgBjB,IAhBiB,CAAA,OAAA;EAAA,IAAA,SAAA,GAgBjB,IAhBiB,CAAA,SAAA;EAAA,IAAA,QAAA,GAgBjB,IAhBiB,CAAA,QAAA;EAAA,IAOlBC,MAPkB,GAgBjB,IAhBiB,CAOlBA,MAPkB;;EAiBlB,sBAAsCC,KAAK,CAALA,QAAAA,CAAtC,SAAsCA,CAAtC;EAAA;EAAA,IAAM,WAAN;EAAA,IAAM,cAAN;;EAGA,IAAMC,UAAU,GAAGC,mBAAnB,EAAA;EACA,IAAMC,WAAW,GAAGF,UAAU,CAAVA,KAAAA,GAAmBA,UAAU,CALhD,MAKD;EAGA,IAAMG,QAAQ,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;IACnC,IAAMC,SAAS,GAAG,IAAIC,IAAI,CAAR,cAAA,CAAA,MAAA,EAAgC;MAChDC,IAAI,EAD4C,SAAA;MAEhDC,MAAM,EAF0C,SAAA;MAGhDC,QAAQ,EAAE;IAHsC,CAAhC,CAAlB;IAKA,IAAMC,SAAS,GAAGL,SAAS,CAATA,MAAAA,CAAiB,IAAA,IAAA,CAASM,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA5C,EAA4CA,CAAT,CAAjBN,CAAlB;IACA,OAAOK,SAAS,CAATA,QAAAA,CAAP,IAAOA,CAAP;EAPe,CAAA,EAQd,CAhBF,MAgBE,CARc,CAAjB;EAWAV,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAIY,KAAK,IAAT,EAAA,EAAiB;MACfC,cAAc,CAAdA,IAAc,CAAdA;IADF,CAAA,MAEO;MACLA,cAAc,CAAdA,IAAc,CAAdA;IAJkB;EAAtBb,CAAAA,EAAAA,EAAAA;EASA,IAAMc,aAAa,GAAG,KAAK,CAAL,WAAA,CACnBC,UAAAA,MAAD,EAAY;IACVA,MAAM,CAANA,KAAAA,GAAeC,kBAAkB,CAACD,MAAM,CAAP,KAAA,EAAA,KAAA,EAAjCA,QAAiC,CAAjCA;IACAE,QAAQ,CAARA,MAAQ,CAARA;EAHkB,CAAA,EAKpB,CAAA,QAAA,EAAA,KAAA,EALF,QAKE,CALoB,CAAtB;EAQA,OACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;IACE,KAAK,EAAE;MAAEpB,IAAI,EAAN,WAAA;MAAqBC,OAAO,EAAEe;IAA9B;EADT,CAAA,EAGE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEV,WAAW,GAAGe,MAAM,CAAT,aAAA,GAA0BA,MAAM,CAACC;EAAzD,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;IACE,SAAS,EADX,SAAA;IAEE,KAAK,EAFP,KAAA;IAGE,OAAO,EAHT,OAAA;IAIE,QAAQ,EAJV,QAAA;IAKE,QAAQ,EALV,QAAA;IAME,YAAY,EANd,YAAA;IAOE,OAAO,EAAEC;EAPX,CAAA,CADF,EAUG,SAAS,KAAKC,UAAU,CAAxB,MAAA,GACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEH,MAAM,CAACI;EAApB,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;IACE,KAAK,EAAEC,iBAAiB,CAAA,KAAA,EAD1B,QAC0B,CAD1B;IAEE,OAAO,EAFT,OAAA;IAGE,OAAO,EAHT,OAAA;IAIE,QAAQ,EAJV,QAAA;IAKE,QAAQ,EAAET;EALZ,CAAA,CADF,CADD,GAdP,IAII,CAHF,CADF;AA4BD;;AAED,IAAMI,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BM,aAAa,EAAE;IACbC,aAAa,EADA,KAAA;IAEbC,UAAU,EAFG,QAAA;IAGbC,cAAc,EAHD,QAAA;IAIbC,KAAK,EAAE,KAAA,CAAA,GAAS,KAAT,CAAA,GAAA,EAAA,GAAuBC;EAJjB,CADgB;EAO/BV,YAAY,EAPmB,EAAA;EAQ/BG,cAAc,EAAE;IAAEQ,UAAU,EAAZ,EAAA;IAAkBC,WAAW,EAA7B,EAAA;IAAmCC,YAAY,EAAE;EAAjD;AARe,CAAlB,CAAf;AAWA,eAAehC,KAAK,CAALA,IAAAA,CAAf,UAAeA,CAAf","sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet, useWindowDimensions } from 'react-native'\n\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\n\nimport AnalogClock from './AnalogClock'\nimport { circleSize } from './timeUtils'\nimport TimeInputs from './TimeInputs'\n\nexport const DisplayModeContext = React.createContext<{\n  mode: 'AM' | 'PM' | undefined\n  setMode: React.Dispatch<React.SetStateAction<'AM' | 'PM' | undefined>>\n}>({ mode: 'AM', setMode: () => {} })\n\ntype onChangeFunc = ({\n  hours,\n  minutes,\n  focused,\n}: {\n  hours: number\n  minutes: number\n  focused?: undefined | PossibleClockTypes\n}) => any\n\nfunction TimePicker({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  locale,\n}: {\n  locale?: undefined | string\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: onChangeFunc\n}) {\n  const [displayMode, setDisplayMode] = React.useState<'AM' | 'PM' | undefined>(\n    undefined\n  )\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n\n  // method to check whether we have 24 hours in clock or 12\n  const is24Hour = React.useMemo(() => {\n    const formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC',\n    })\n    const formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)))\n    return formatted.includes('23')\n  }, [locale])\n\n  // Initialize display Mode according the hours value\n  React.useEffect(() => {\n    if (hours >= 12) {\n      setDisplayMode('PM')\n    } else {\n      setDisplayMode('AM')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const onInnerChange = React.useCallback<onChangeFunc>(\n    (params) => {\n      params.hours = toHourOutputFormat(params.hours, hours, is24Hour)\n      onChange(params)\n    },\n    [onChange, hours, is24Hour]\n  )\n\n  return (\n    <DisplayModeContext.Provider\n      value={{ mode: displayMode, setMode: setDisplayMode }}\n    >\n      <View style={isLandscape ? styles.rootLandscape : styles.rootPortrait}>\n        <TimeInputs\n          inputType={inputType}\n          hours={hours}\n          minutes={minutes}\n          is24Hour={is24Hour}\n          onChange={onChange}\n          onFocusInput={onFocusInput}\n          focused={focused}\n        />\n        {inputType === inputTypes.picker ? (\n          <View style={styles.clockContainer}>\n            <AnalogClock\n              hours={toHourInputFormat(hours, is24Hour)}\n              minutes={minutes}\n              focused={focused}\n              is24Hour={is24Hour}\n              onChange={onInnerChange}\n            />\n          </View>\n        ) : null}\n      </View>\n    </DisplayModeContext.Provider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 24 * 3 + 96 * 2 + 52 + circleSize,\n  },\n  rootPortrait: {},\n  clockContainer: { paddingTop: 36, paddingLeft: 12, paddingRight: 12 },\n})\n\nexport default React.memo(TimePicker)\n"]},"metadata":{},"sourceType":"module"}