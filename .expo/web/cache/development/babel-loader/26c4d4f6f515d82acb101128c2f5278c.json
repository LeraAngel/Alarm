{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from 'react-native-paper';\nimport { circleSize } from \"./timeUtils\";\nimport { useTextColorOnPrimary } from \"../utils\";\nimport { DisplayModeContext } from \"./TimePicker\";\n\nfunction AnalogClockHours(_ref) {\n  var is24Hour = _ref.is24Hour,\n      hours = _ref.hours;\n\n  var _React$useContext = React.useContext(DisplayModeContext),\n      mode = _React$useContext.mode;\n\n  var outerRange = getHourNumbers(false, circleSize, 12, 12);\n  var innerRange = getHourNumbers(true, circleSize, 12, 12);\n  var color = useTextColorOnPrimary();\n  return React.createElement(React.Fragment, null, outerRange.map(function (a, i) {\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.outerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.outerHourInner\n    }, React.createElement(Text, {\n      style: hours === i + 1 ? {\n        color: color\n      } : null,\n      selectable: false\n    }, mode === 'AM' && i + 1 === 12 ? '00' : i + 1)));\n  }), is24Hour ? innerRange.map(function (a, i) {\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.innerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.innerHourInner\n    }, React.createElement(Text, {\n      selectable: false,\n      style: [styles.innerHourText, i + 13 === hours || i + 13 === 24 && hours === 0 ? {\n        color: color\n      } : null]\n    }, i + 13 === 24 ? '00' : i + 13)));\n  }) : null);\n}\n\nvar styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n    borderRadius: 25\n  },\n  outerHourInner: {\n    borderRadius: 25\n  },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20\n  },\n  innerHourInner: {\n    borderRadius: 20\n  },\n  innerHourText: {\n    fontSize: 13\n  }\n});\n\nfunction getHourNumbers(is24Hour, size, count, arrayLength) {\n  var angle = 0;\n  var step = 2 * Math.PI / count;\n  var radius = size / (is24Hour ? 4 : 2.5);\n  angle = -90 * Math.PI / 180 + Math.PI / 6;\n  return Array(arrayLength).fill(true).map(function () {\n    var x = Math.round(size / 2 + radius * Math.cos(angle));\n    var y = Math.round(size / 2 + radius * Math.sin(angle));\n    angle += step;\n    return [x, y];\n  });\n}\n\nexport default React.memo(AnalogClockHours);","map":{"version":3,"sources":["AnalogClockHours.tsx"],"names":["hours","mode","React","outerRange","getHourNumbers","innerRange","color","useTextColorOnPrimary","styles","top","a","left","outerHourInner","i","is24Hour","innerHourInner","outerHourRoot","position","justifyContent","alignItems","zIndex","width","height","marginLeft","marginTop","borderRadius","innerHourRoot","innerHourText","fontSize","angle","step","Math","radius","size","x","y"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,SAAA,IAAA,QAAA,oBAAA;AACA,SAAA,UAAA;AACA,SAAA,qBAAA;AACA,SAAA,kBAAA;;AAEA,SAAA,gBAAA,CAAA,IAAA,EAMG;EANuB,IAAA,QAAA,GAMvB,IANuB,CAAA,QAAA;EAAA,IAExBA,KAFwB,GAMvB,IANuB,CAExBA,KAFwB;;EAOxB,wBAAiBE,KAAK,CAALA,UAAAA,CAAjB,kBAAiBA,CAAjB;EAAA,IAAQD,IAAR,qBAAQA,IAAR;;EACA,IAAME,UAAU,GAAGC,cAAc,CAAA,KAAA,EAAA,UAAA,EAAA,EAAA,EAAjC,EAAiC,CAAjC;EACA,IAAMC,UAAU,GAAGD,cAAc,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA,EAAjC,EAAiC,CAAjC;EACA,IAAME,KAAK,GAAGC,qBAAd,EAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,UAAU,CAAV,GAAA,CAAe,UAAA,CAAA,EAAA,CAAA;IAAA,OACd,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MACE,GAAG,EADL,CAAA;MAEE,aAAa,EAFf,MAAA;MAGE,KAAK,EAAE,CACLC,MAAM,CADD,aAAA,EAEL;QACEC,GAAG,EAAEC,CAAC,CAADA,CAAC,CAADA,IADP,CAAA;QAEEC,IAAI,EAAED,CAAC,CAADA,CAAC,CAADA,IAAQ;MAFhB,CAFK;IAHT,CAAA,EAWE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAEF,MAAM,CAACI;IAApB,CAAA,EAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAE,KAAK,KAAKC,CAAC,GAAX,CAAA,GAAkB;QAAEP,KAAAA,EAAAA;MAAF,CAAlB,GAAb,IAAA;MAAiD,UAAU,EAAE;IAA7D,CAAA,EACGL,IAAI,KAAJA,IAAAA,IAAiBY,CAAC,GAADA,CAAAA,KAAjBZ,EAAAA,GAAAA,IAAAA,GAAuCY,CAAC,GAhBnD,CAeQ,CAFF,CAXF,CADc;EAAA,CAAf,CADH,EAqBGC,QAAQ,GACL,UAAU,CAAV,GAAA,CAAe,UAAA,CAAA,EAAA,CAAA;IAAA,OACb,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MACE,GAAG,EADL,CAAA;MAEE,aAAa,EAFf,MAAA;MAGE,KAAK,EAAE,CACLN,MAAM,CADD,aAAA,EAEL;QACEC,GAAG,EAAEC,CAAC,CAADA,CAAC,CAADA,IADP,CAAA;QAEEC,IAAI,EAAED,CAAC,CAADA,CAAC,CAADA,IAAQ;MAFhB,CAFK;IAHT,CAAA,EAWE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAEF,MAAM,CAACO;IAApB,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MACE,UAAU,EADZ,KAAA;MAEE,KAAK,EAAE,CACLP,MAAM,CADD,aAAA,EAEL,CAAC,GAAD,EAAA,KAAA,KAAA,IAAqBK,CAAC,GAADA,EAAAA,KAAAA,EAAAA,IAAiBb,KAAK,KAA3C,CAAA,GACI;QAAEM,KAAAA,EAAAA;MAAF,CADJ,GAFK,IAAA;IAFT,CAAA,EASGO,CAAC,GAADA,EAAAA,KAAAA,EAAAA,GAAAA,IAAAA,GAAuBA,CAAC,GAvB5B,EAcC,CADF,CAXF,CADa;EAAA,CAAf,CADK,GAtBb,IACE,CADF;AAqDD;;AAED,IAAML,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BQ,aAAa,EAAE;IACbC,QAAQ,EADK,UAAA;IAEbC,cAAc,EAFD,QAAA;IAGbC,UAAU,EAHG,QAAA;IAIbC,MAAM,EAJO,EAAA;IAKbC,KAAK,EALQ,EAAA;IAMbC,MAAM,EANO,EAAA;IAObC,UAAU,EAAE,CAPC,EAAA;IAQbC,SAAS,EAAE,CARE,EAAA;IAUbC,YAAY,EAAE;EAVD,CADgB;EAa/Bb,cAAc,EAAE;IAAEa,YAAY,EAAE;EAAhB,CAbe;EAc/BC,aAAa,EAAE;IACbT,QAAQ,EADK,UAAA;IAEbG,MAAM,EAFO,EAAA;IAGbF,cAAc,EAHD,QAAA;IAIbC,UAAU,EAJG,QAAA;IAKbE,KAAK,EALQ,EAAA;IAMbC,MAAM,EANO,EAAA;IAObC,UAAU,EAAE,CAPC,EAAA;IAQbC,SAAS,EAAE,CARE,EAAA;IASbC,YAAY,EAAE;EATD,CAdgB;EAyB/BV,cAAc,EAAE;IAAEU,YAAY,EAAE;EAAhB,CAzBe;EA0B/BE,aAAa,EAAE;IAAEC,QAAQ,EAAE;EAAZ;AA1BgB,CAAlB,CAAf;;AA6BA,SAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA,WAAA,EAKE;EACA,IAAIC,KAAK,GAAT,CAAA;EACA,IAAIC,IAAI,GAAI,IAAIC,IAAI,CAAT,EAAC,GAAZ,KAAA;EACA,IAAIC,MAAM,GAAGC,IAAI,IAAInB,QAAQ,GAAA,CAAA,GAA7B,GAAiB,CAAjB;EAEAe,KAAK,GAAI,CAAA,EAAA,GAAME,IAAI,CAAX,EAAC,GAAD,GAAC,GAAuBA,IAAI,CAAJA,EAAAA,GAAhCF,CAAAA;EAEA,OAAO,KAAK,CAAL,WAAK,CAAL,CAAA,IAAA,CAAA,IAAA,EAAA,GAAA,CAEA,YAAM;IACT,IAAIK,CAAC,GAAGH,IAAI,CAAJA,KAAAA,CAAWE,IAAI,GAAJA,CAAAA,GAAWD,MAAM,GAAGD,IAAI,CAAJA,GAAAA,CAAvC,KAAuCA,CAA/BA,CAAR;IACA,IAAII,CAAC,GAAGJ,IAAI,CAAJA,KAAAA,CAAWE,IAAI,GAAJA,CAAAA,GAAWD,MAAM,GAAGD,IAAI,CAAJA,GAAAA,CAAvC,KAAuCA,CAA/BA,CAAR;IACAF,KAAK,IAALA,IAAAA;IACA,OAAO,CAAA,CAAA,EAAP,CAAO,CAAP;EANJ,CAAO,CAAP;AAQD;;AAED,eAAe3B,KAAK,CAALA,IAAAA,CAAf,gBAAeA,CAAf","sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { circleSize } from './timeUtils'\nimport { useTextColorOnPrimary } from '../utils'\nimport { DisplayModeContext } from './TimePicker'\n\nfunction AnalogClockHours({\n  is24Hour,\n  hours,\n}: {\n  is24Hour: boolean\n  hours: number\n}) {\n  const { mode } = React.useContext(DisplayModeContext)\n  const outerRange = getHourNumbers(false, circleSize, 12, 12)\n  const innerRange = getHourNumbers(true, circleSize, 12, 12)\n  const color = useTextColorOnPrimary()\n\n  return (\n    <>\n      {outerRange.map((a, i) => (\n        <View\n          key={i}\n          pointerEvents=\"none\"\n          style={[\n            styles.outerHourRoot,\n            {\n              top: a[1] || 0,\n              left: a[0] || 0,\n            },\n          ]}\n        >\n          <View style={styles.outerHourInner}>\n            {/* Display 00 instead of 12 for AM hours */}\n            <Text style={hours === i + 1 ? { color } : null} selectable={false}>\n              {mode === 'AM' && i + 1 === 12 ? '00' : i + 1}\n            </Text>\n          </View>\n        </View>\n      ))}\n      {is24Hour\n        ? innerRange.map((a, i) => (\n            <View\n              key={i}\n              pointerEvents=\"none\"\n              style={[\n                styles.innerHourRoot,\n                {\n                  top: a[1] || 0,\n                  left: a[0] || 0,\n                },\n              ]}\n            >\n              <View style={styles.innerHourInner}>\n                <Text\n                  selectable={false}\n                  style={[\n                    styles.innerHourText,\n                    i + 13 === hours || (i + 13 === 24 && hours === 0)\n                      ? { color }\n                      : null,\n                  ]}\n                >\n                  {i + 13 === 24 ? '00' : i + 13}\n                </Text>\n              </View>\n            </View>\n          ))\n        : null}\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n\n    borderRadius: 25,\n  },\n  outerHourInner: { borderRadius: 25 },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20,\n  },\n  innerHourInner: { borderRadius: 20 },\n  innerHourText: { fontSize: 13 },\n})\n\nfunction getHourNumbers(\n  is24Hour: boolean,\n  size: number,\n  count: number,\n  arrayLength: number\n) {\n  let angle = 0\n  let step = (2 * Math.PI) / count\n  let radius = size / (is24Hour ? 4 : 2.5)\n\n  angle = (-90 * Math.PI) / 180 + Math.PI / 6\n\n  return Array(arrayLength)\n    .fill(true)\n    .map(() => {\n      let x = Math.round(size / 2 + radius * Math.cos(angle))\n      let y = Math.round(size / 2 + radius * Math.sin(angle))\n      angle += step\n      return [x, y]\n    })\n}\n\nexport default React.memo(AnalogClockHours)\n"]},"metadata":{},"sourceType":"module"}