{"ast":null,"code":"import * as React from 'react';\nimport Color from 'color';\nimport { useTheme } from 'react-native-paper';\nexport var circleSize = 215;\nexport var hourTypes = {\n  am: 'am',\n  pm: 'pm'\n};\nexport function getHourType(hours) {\n  if (hours >= 0 && hours <= 12) {\n    return hourTypes.am;\n  }\n\n  if (hours > 12 && hours <= 24) {\n    return hourTypes.pm;\n  }\n\n  return undefined;\n}\nexport var inputTypes = {\n  keyboard: 'keyboard',\n  picker: 'picker'\n};\nexport var reverseInputTypes = {\n  keyboard: 'picker',\n  picker: 'keyboard'\n};\nexport var inputTypeIcons = {\n  keyboard: 'keyboard-outline',\n  picker: 'clock-outline'\n};\nexport var clockTypes = {\n  minutes: 'minutes',\n  hours: 'hours'\n};\nvar outerHeight = 34;\n\nvar _30 = Math.PI / 6;\n\nvar _12 = Math.PI / 30;\n\nvar _360 = Math.PI * 2;\n\nvar _90 = Math.PI / 2;\n\nexport function snap(angle, step) {\n  var a = angle;\n\n  while (a < 0) {\n    a += _360;\n  }\n\n  var diff = a % step;\n\n  if (diff <= step / 2) {\n    return angle - diff;\n  }\n\n  return angle - diff + step;\n}\nexport function getHourTypeFromOffset(left, top, size) {\n  var w = size / 2;\n  var x = w - left;\n  var y = size / 2 - top;\n  var distance = Math.sqrt(x * x + y * y);\n  var maxPm = w - outerHeight;\n  return distance > maxPm ? hourTypes.am : hourTypes.pm;\n}\nexport function getMinutes(handAngle) {\n  handAngle = snap(handAngle, _12);\n  var minute = parseInt(((handAngle - _90) % _360 / _12).toFixed(), 10);\n\n  while (minute < 0) {\n    minute += 60;\n  }\n\n  while (minute >= 60) {\n    minute -= 60;\n  }\n\n  return minute;\n}\nexport function getHours(handAngle, hourType) {\n  handAngle = snap(handAngle, _30);\n  var hour = parseInt(((handAngle - _90) % _360 / _30).toFixed(), 10);\n  if (hour < 0) hour += 12;\n  if (hour >= 12) hour -= 12;\n\n  if (hourType === hourTypes.am) {\n    if (hour <= 0) {\n      hour += 12;\n    } else if (hour >= 12) {\n      hour -= 12;\n    }\n  }\n\n  if (hourType === hourTypes.pm) {\n    if (hour <= 0) {\n      hour += 12;\n    } else if (hour > 12) {\n      hour -= 12;\n    }\n  }\n\n  return hour;\n}\nexport function getAngle(left, top, size) {\n  var x = size / 2 - left;\n  var y = size / 2 - top;\n  var angle = x ? Math.atan(y / x) : y < 0 ? -_90 : _90;\n\n  if (x < 0) {\n    angle = -angle + 2 * (_90 + angle);\n  }\n\n  return angle;\n}\nexport function useSwitchColors(highlighted) {\n  var theme = useTheme();\n  var backgroundColor = React.useMemo(function () {\n    if (theme.dark) {\n      if (highlighted) {\n        return Color(theme.colors.primary).hex();\n      }\n\n      return theme.colors.backdrop;\n    }\n\n    if (highlighted) {\n      return Color(theme.colors.primary).lighten(1).hex();\n    }\n\n    return theme.colors.surface;\n  }, [highlighted, theme]);\n  var color = React.useMemo(function () {\n    if (highlighted && !theme.dark) {\n      return theme.colors.primary;\n    }\n\n    return theme.colors.placeholder;\n  }, [highlighted, theme]);\n  return {\n    backgroundColor: backgroundColor,\n    color: color\n  };\n}\nexport function useInputColors(highlighted) {\n  var theme = useTheme();\n  var backgroundColor = React.useMemo(function () {\n    if (theme.dark) {\n      if (highlighted) {\n        return Color(theme.colors.primary).hex();\n      }\n\n      return Color(theme.colors.surface).lighten(1.2).hex();\n    }\n\n    if (highlighted) {\n      return Color(theme.colors.primary).lighten(1).hex();\n    }\n\n    return Color(theme.colors.surface).darken(0.1).hex();\n  }, [highlighted, theme]);\n  var color = React.useMemo(function () {\n    if (highlighted && !theme.dark) {\n      return theme.colors.primary;\n    }\n\n    return theme.colors.text;\n  }, [highlighted, theme]);\n  return {\n    backgroundColor: backgroundColor,\n    color: color\n  };\n}\nexport function toHourInputFormat(hours, is24Hour) {\n  if (hours === 24) {\n    return 0;\n  }\n\n  if (is24Hour) {\n    return hours;\n  }\n\n  if (hours > 12) {\n    return hours - 12;\n  }\n\n  return hours;\n}\nexport function toHourOutputFormat(newHours, previousHours, is24Hour) {\n  if (is24Hour) {\n    return newHours;\n  }\n\n  if (previousHours > 12 && newHours < 12) {\n    return newHours + 12;\n  }\n\n  return newHours;\n}","map":{"version":3,"sources":["timeUtils.ts"],"names":["circleSize","hourTypes","am","pm","hours","inputTypes","keyboard","picker","reverseInputTypes","inputTypeIcons","clockTypes","minutes","outerHeight","_30","Math","_12","_360","_90","a","diff","step","angle","w","size","x","y","distance","maxPm","handAngle","snap","minute","parseInt","hour","hourType","theme","useTheme","backgroundColor","Color","color","highlighted","previousHours","newHours"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport Color from 'color'\nimport { useTheme } from 'react-native-paper'\n\n// 250? when bigger?\nexport const circleSize = 215\n\nexport type PossibleHourTypes = 'am' | 'pm'\nexport type HourTypeMap = {\n  [hourType in PossibleHourTypes]: PossibleHourTypes\n}\nexport const hourTypes: HourTypeMap = {\n  am: 'am',\n  pm: 'pm',\n}\n\nexport function getHourType(hours: number): PossibleHourTypes | undefined {\n  if (hours >= 0 && hours <= 12) {\n    return hourTypes.am\n  }\n  if (hours > 12 && hours <= 24) {\n    return hourTypes.pm\n  }\n  return undefined\n}\n\nexport type PossibleInputTypes = 'keyboard' | 'picker'\nexport type InputTypeMap = {\n  [inputType in PossibleInputTypes]: PossibleInputTypes\n}\nexport const inputTypes: InputTypeMap = {\n  keyboard: 'keyboard',\n  picker: 'picker',\n}\n\nexport const reverseInputTypes: InputTypeMap = {\n  keyboard: 'picker',\n  picker: 'keyboard',\n}\ntype InputIconMap = {\n  [inputType in PossibleInputTypes]: string\n}\nexport const inputTypeIcons: InputIconMap = {\n  keyboard: 'keyboard-outline',\n  picker: 'clock-outline',\n}\n\nexport type PossibleClockTypes = 'hours' | 'minutes'\nexport type ClockTypeMap = {\n  [clockType in PossibleClockTypes]: PossibleClockTypes\n}\nexport const clockTypes: ClockTypeMap = {\n  minutes: 'minutes',\n  hours: 'hours',\n}\n\n// Code inspiration and copied from: https://github.com/ShaneGH/analogue-time-picker/blob/master/src/utils/angle.ts\n\nconst outerHeight = 34\nconst _30 = Math.PI / 6\nconst _12 = Math.PI / 30\nconst _360 = Math.PI * 2\nconst _90 = Math.PI / 2\n\n/** Snap an angle to a given step. E.g. if angle = 22° and step = 10°, round down to 20° */\nexport function snap(angle: number, step: number) {\n  let a = angle\n  while (a < 0) a += _360\n  let diff = a % step\n\n  if (diff <= step / 2) {\n    return angle - diff\n  }\n\n  return angle - diff + step\n}\n\n// detect am / pm based on offset\nexport function getHourTypeFromOffset(\n  left: number,\n  top: number,\n  size: number\n): PossibleHourTypes {\n  const w = size / 2\n  const x = w - left\n  const y = size / 2 - top\n\n  const distance = Math.sqrt(x * x + y * y)\n  const maxPm = w - outerHeight\n\n  return distance > maxPm ? hourTypes.am : hourTypes.pm\n}\n\n// Calculate the minute from the hand angle\nexport function getMinutes(handAngle: number) {\n  handAngle = snap(handAngle, _12)\n\n  let minute = parseInt((((handAngle - _90) % _360) / _12).toFixed(), 10)\n  while (minute < 0) minute += 60\n  while (minute >= 60) minute -= 60\n\n  return minute\n}\n\n// Calculate the hour from the hand angle\nexport function getHours(\n  handAngle: number,\n  hourType: PossibleHourTypes | undefined\n) {\n  handAngle = snap(handAngle, _30)\n\n  let hour = parseInt((((handAngle - _90) % _360) / _30).toFixed(), 10)\n  if (hour < 0) hour += 12\n  if (hour >= 12) hour -= 12\n\n  if (hourType === hourTypes.am) {\n    if (hour <= 0) {\n      hour += 12\n    } else if (hour >= 12) {\n      hour -= 12\n    }\n  }\n  if (hourType === hourTypes.pm) {\n    if (hour <= 0) {\n      hour += 12\n    } else if (hour > 12) {\n      hour -= 12\n    }\n  }\n\n  return hour\n}\n\n/** Get the angle of the left/top co-ordinate from the center of the width.height box */\nexport function getAngle(left: number, top: number, size: number) {\n  const x = size / 2 - left\n  const y = size / 2 - top\n\n  // tan O = y / x\n  let angle = x ? Math.atan(y / x) : y < 0 ? -_90 : _90\n  if (x < 0) {\n    // reflect along vertical axis\n    angle = -angle + 2 * (_90 + angle)\n  }\n\n  return angle\n}\n\nexport function useSwitchColors(highlighted: boolean) {\n  const theme = useTheme()\n  const backgroundColor = React.useMemo<string>(() => {\n    if (theme.dark) {\n      if (highlighted) {\n        return Color(theme.colors.primary).hex()\n      }\n      return theme.colors.backdrop\n    }\n\n    if (highlighted) {\n      return Color(theme.colors.primary).lighten(1).hex()\n    }\n    return theme.colors.surface\n  }, [highlighted, theme])\n\n  const color = React.useMemo<string>(() => {\n    if (highlighted && !theme.dark) {\n      return theme.colors.primary\n    }\n    return theme.colors.placeholder\n  }, [highlighted, theme])\n\n  return { backgroundColor, color }\n}\n\nexport function useInputColors(highlighted: boolean) {\n  const theme = useTheme()\n  const backgroundColor = React.useMemo<string>(() => {\n    if (theme.dark) {\n      if (highlighted) {\n        return Color(theme.colors.primary).hex()\n      }\n      return Color(theme.colors.surface).lighten(1.2).hex()\n    }\n\n    if (highlighted) {\n      return Color(theme.colors.primary).lighten(1).hex()\n    }\n    return Color(theme.colors.surface).darken(0.1).hex()\n  }, [highlighted, theme])\n\n  const color = React.useMemo<string>(() => {\n    if (highlighted && !theme.dark) {\n      return theme.colors.primary\n    }\n    return theme.colors.text\n  }, [highlighted, theme])\n\n  return { backgroundColor, color }\n}\n\nexport function toHourInputFormat(hours: number, is24Hour: boolean): number {\n  if (hours === 24) {\n    return 0\n  }\n  if (is24Hour) {\n    return hours\n  }\n  if (hours > 12) {\n    return hours - 12\n  }\n  return hours\n}\n\nexport function toHourOutputFormat(\n  newHours: number,\n  previousHours: number,\n  is24Hour: boolean\n): number {\n  if (is24Hour) {\n    return newHours\n  }\n  if (previousHours > 12 && newHours < 12) {\n    return newHours + 12\n  }\n  return newHours\n}\n"]},"metadata":{},"sourceType":"module"}