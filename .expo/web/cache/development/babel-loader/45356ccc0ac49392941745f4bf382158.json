{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport Color from 'color';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from 'react-native-paper';\nimport { circleSize, clockTypes, getAngle, getHours, getHourType, getHourTypeFromOffset, getMinutes, hourTypes } from \"./timeUtils\";\nimport * as React from 'react';\nimport { useLatest } from \"../utils\";\nimport AnalogClockHours from \"./AnalogClockHours\";\nimport AnimatedClockSwitcher from \"./AnimatedClockSwitcher\";\nimport AnalogClockMinutes from \"./AnalogClockMinutes\";\nimport { DisplayModeContext } from \"./TimePicker\";\n\nfunction AnalogClock(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      focused = _ref.focused,\n      is24Hour = _ref.is24Hour,\n      onChange = _ref.onChange;\n  var theme = useTheme();\n\n  var _React$useContext = React.useContext(DisplayModeContext),\n      mode = _React$useContext.mode;\n\n  var shortPointer = (hours === 0 || hours > 12) && is24Hour;\n  var clockRef = React.useRef(null);\n  var hoursRef = useLatest(hours);\n  var onChangeRef = useLatest(onChange);\n  var minutesRef = useLatest(minutes);\n  var focusedRef = useLatest(focused);\n  var is24HourRef = useLatest(is24Hour);\n  var modeRef = useLatest(mode);\n  var onPointerMove = React.useCallback(function (e, final) {\n    var x = e.nativeEvent.locationX;\n    var y = e.nativeEvent.locationY;\n    var angle = getAngle(x, y, circleSize);\n\n    if (focusedRef.current === clockTypes.hours) {\n      var hours24 = is24HourRef.current;\n      var previousHourType = getHourType(hoursRef.current);\n      var pickedHours = getHours(angle, previousHourType);\n      var hours12AndPm = !hours24 && modeRef.current === 'AM';\n      var hourTypeFromOffset = getHourTypeFromOffset(x, y, circleSize);\n      var hours24AndPM = hours24 && hourTypeFromOffset === hourTypes.pm;\n\n      if (hours12AndPm || hours24AndPM) {\n        pickedHours += 12;\n      }\n\n      if (modeRef.current === 'AM' && pickedHours === 12) {\n        pickedHours = 0;\n      }\n\n      if (!hours24 && modeRef.current === 'AM' && pickedHours === 12 || pickedHours === 24) {\n        pickedHours = 0;\n      }\n\n      if (hoursRef.current !== pickedHours || final) {\n        onChangeRef.current({\n          hours: pickedHours,\n          minutes: minutesRef.current,\n          focused: final ? clockTypes.minutes : undefined\n        });\n      }\n    } else if (focusedRef.current === clockTypes.minutes) {\n      var pickedMinutes = getMinutes(angle);\n\n      if (minutesRef.current !== pickedMinutes) {\n        onChangeRef.current({\n          hours: hoursRef.current,\n          minutes: pickedMinutes\n        });\n      }\n    }\n  }, [focusedRef, is24HourRef, hoursRef, onChangeRef, minutesRef, modeRef]);\n  var panResponder = React.useRef(PanResponder.create({\n    onPanResponderGrant: function onPanResponderGrant(e) {\n      return onPointerMove(e, false);\n    },\n    onPanResponderMove: function onPanResponderMove(e) {\n      return onPointerMove(e, false);\n    },\n    onPanResponderRelease: function onPanResponderRelease(e) {\n      return onPointerMove(e, true);\n    },\n    onStartShouldSetPanResponder: returnTrue,\n    onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n      return false;\n    },\n    onMoveShouldSetPanResponder: returnTrue,\n    onMoveShouldSetPanResponderCapture: returnTrue,\n    onPanResponderTerminationRequest: returnTrue,\n    onShouldBlockNativeResponder: returnTrue\n  })).current;\n  var dynamicSize = focused === clockTypes.hours && shortPointer ? 33 : 0;\n  var pointerNumber = focused === clockTypes.hours ? hours : minutes;\n  var degreesPerNumber = focused === clockTypes.hours ? 30 : 6;\n  return React.createElement(View, _extends({\n    ref: clockRef\n  }, panResponder.panHandlers, {\n    style: [styles.clock, {\n      backgroundColor: theme.dark ? Color(theme.colors.surface).lighten(1.2).hex() : Color(theme.colors.surface).darken(0.1).hex()\n    }],\n    cursor: 'pointer'\n  }), React.createElement(View, {\n    style: [styles.line, {\n      backgroundColor: theme.colors.primary,\n      transform: [{\n        rotate: -90 + pointerNumber * degreesPerNumber + 'deg'\n      }, {\n        translateX: circleSize / 4 - 4 - dynamicSize / 2\n      }],\n      width: circleSize / 2 - 4 - dynamicSize\n    }],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: [styles.endPoint, {\n      backgroundColor: theme.colors.primary\n    }]\n  })), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.center],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: [styles.middlePoint, {\n      backgroundColor: theme.colors.primary\n    }]\n  })), React.createElement(AnimatedClockSwitcher, {\n    focused: focused,\n    hours: React.createElement(AnalogClockHours, {\n      is24Hour: is24Hour,\n      hours: hours\n    }),\n    minutes: React.createElement(AnalogClockMinutes, {\n      minutes: minutes\n    })\n  }));\n}\n\nvar styles = StyleSheet.create({\n  clock: {\n    height: circleSize,\n    width: circleSize,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: circleSize / 2\n  },\n  middlePoint: {\n    borderRadius: 4,\n    height: 8,\n    width: 8\n  },\n  center: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  endPoint: {\n    borderRadius: 15,\n    height: 30,\n    width: 30,\n    position: 'absolute',\n    right: 0,\n    bottom: -14\n  },\n  line: {\n    position: 'absolute',\n    marginBottom: -1,\n    height: 2,\n    borderRadius: 4\n  }\n});\n\nfunction returnTrue() {\n  return true;\n}\n\nexport default React.memo(AnalogClock);","map":{"version":3,"sources":["AnalogClock.tsx"],"names":["onChange","theme","useTheme","mode","React","shortPointer","hours","clockRef","hoursRef","useLatest","onChangeRef","minutesRef","focusedRef","is24HourRef","modeRef","onPointerMove","x","e","y","angle","getAngle","clockTypes","hours24","previousHourType","getHourType","pickedHours","getHours","hours12AndPm","hourTypeFromOffset","getHourTypeFromOffset","hours24AndPM","hourTypes","minutes","focused","final","undefined","pickedMinutes","getMinutes","panResponder","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderTerminationRequest","onShouldBlockNativeResponder","returnTrue","dynamicSize","pointerNumber","degreesPerNumber","styles","backgroundColor","Color","transform","rotate","translateX","circleSize","width","primary","StyleSheet","clock","height","position","justifyContent","alignItems","borderRadius","middlePoint","center","endPoint","right","bottom","line","marginBottom"],"mappings":"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","sourcesContent":["import Color from 'color'\nimport {\n  GestureResponderEvent,\n  PanResponder,\n  StyleSheet,\n  View,\n} from 'react-native'\nimport { useTheme } from 'react-native-paper'\nimport {\n  circleSize,\n  clockTypes,\n  getAngle,\n  getHours,\n  getHourType,\n  getHourTypeFromOffset,\n  getMinutes,\n  hourTypes,\n  PossibleClockTypes,\n} from './timeUtils'\nimport * as React from 'react'\nimport { useLatest } from '../utils'\nimport AnalogClockHours from './AnalogClockHours'\nimport AnimatedClockSwitcher from './AnimatedClockSwitcher'\nimport AnalogClockMinutes from './AnalogClockMinutes'\nimport { DisplayModeContext } from './TimePicker'\nfunction AnalogClock({\n  hours,\n  minutes,\n  focused,\n  is24Hour,\n  onChange,\n}: {\n  hours: number\n  minutes: number\n  focused: PossibleClockTypes\n  is24Hour: boolean\n  onChange: (hoursMinutesAndFocused: {\n    hours: number\n    minutes: number\n    focused?: undefined | PossibleClockTypes\n  }) => any\n}) {\n  const theme = useTheme()\n  const { mode } = React.useContext(DisplayModeContext)\n  // used to make pointer shorter if hours are selected and above 12\n  const shortPointer = (hours === 0 || hours > 12) && is24Hour\n  const clockRef = React.useRef<View | null>(null)\n  // Hooks are nice, sometimes... :-)..\n  // We need the latest values, since the onPointerMove uses a closure to the function\n  const hoursRef = useLatest(hours)\n  const onChangeRef = useLatest(onChange)\n  const minutesRef = useLatest(minutes)\n  const focusedRef = useLatest(focused)\n  const is24HourRef = useLatest(is24Hour)\n  const modeRef = useLatest(mode)\n  const onPointerMove = React.useCallback(\n    (e: GestureResponderEvent, final: boolean) => {\n      let x = e.nativeEvent.locationX\n      let y = e.nativeEvent.locationY\n      let angle = getAngle(x, y, circleSize)\n      if (focusedRef.current === clockTypes.hours) {\n        let hours24 = is24HourRef.current\n        let previousHourType = getHourType(hoursRef.current)\n        let pickedHours = getHours(angle, previousHourType)\n\n        let hours12AndPm = !hours24 && modeRef.current === 'AM'\n\n        let hourTypeFromOffset = getHourTypeFromOffset(x, y, circleSize)\n        let hours24AndPM = hours24 && hourTypeFromOffset === hourTypes.pm\n\n        // Avoiding the \"24h\"\n        // Should be 12h for 12 hours and PM mode\n\n        if (hours12AndPm || hours24AndPM) {\n          pickedHours += 12\n        }\n        if (modeRef.current === 'AM' && pickedHours === 12) {\n          pickedHours = 0\n        }\n\n        if (\n          (!hours24 && modeRef.current === 'AM' && pickedHours === 12) ||\n          pickedHours === 24\n        ) {\n          pickedHours = 0\n        }\n\n        if (hoursRef.current !== pickedHours || final) {\n          onChangeRef.current({\n            hours: pickedHours,\n            minutes: minutesRef.current,\n            focused: final ? clockTypes.minutes : undefined,\n          })\n        }\n      } else if (focusedRef.current === clockTypes.minutes) {\n        let pickedMinutes = getMinutes(angle)\n        if (minutesRef.current !== pickedMinutes) {\n          onChangeRef.current({\n            hours: hoursRef.current,\n            minutes: pickedMinutes,\n          })\n        }\n      }\n    },\n    [focusedRef, is24HourRef, hoursRef, onChangeRef, minutesRef, modeRef]\n  )\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onPanResponderGrant: (e) => onPointerMove(e, false),\n      onPanResponderMove: (e) => onPointerMove(e, false),\n      onPanResponderRelease: (e) => onPointerMove(e, true),\n      onStartShouldSetPanResponder: returnTrue,\n      onStartShouldSetPanResponderCapture: () => false,\n      onMoveShouldSetPanResponder: returnTrue,\n      onMoveShouldSetPanResponderCapture: returnTrue,\n      onPanResponderTerminationRequest: returnTrue,\n      onShouldBlockNativeResponder: returnTrue,\n    })\n  ).current\n  const dynamicSize = focused === clockTypes.hours && shortPointer ? 33 : 0\n  const pointerNumber = focused === clockTypes.hours ? hours : minutes\n  const degreesPerNumber = focused === clockTypes.hours ? 30 : 6\n  return (\n    <View\n      ref={clockRef}\n      {...panResponder.panHandlers}\n      style={[\n        styles.clock,\n        {\n          backgroundColor: theme.dark\n            ? Color(theme.colors.surface).lighten(1.2).hex()\n            : Color(theme.colors.surface).darken(0.1).hex(),\n        },\n      ]}\n      // @ts-ignore -> https://github.com/necolas/react-native-web/issues/506\n      cursor={'pointer'}\n    >\n      <View\n        style={[\n          styles.line,\n          {\n            backgroundColor: theme.colors.primary,\n            transform: [\n              { rotate: -90 + pointerNumber * degreesPerNumber + 'deg' },\n              {\n                translateX: circleSize / 4 - 4 - dynamicSize / 2,\n              },\n            ],\n            width: circleSize / 2 - 4 - dynamicSize,\n          },\n        ]}\n        pointerEvents=\"none\"\n      >\n        <View\n          style={[styles.endPoint, { backgroundColor: theme.colors.primary }]}\n        />\n      </View>\n      <View\n        style={[StyleSheet.absoluteFill, styles.center]}\n        pointerEvents=\"none\"\n      >\n        <View\n          style={[\n            styles.middlePoint,\n            {\n              backgroundColor: theme.colors.primary,\n            },\n          ]}\n        />\n      </View>\n      <AnimatedClockSwitcher\n        focused={focused}\n        hours={<AnalogClockHours is24Hour={is24Hour} hours={hours} />}\n        minutes={<AnalogClockMinutes minutes={minutes} />}\n      />\n    </View>\n  )\n}\nconst styles = StyleSheet.create({\n  clock: {\n    height: circleSize,\n    width: circleSize,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: circleSize / 2,\n  },\n  middlePoint: {\n    borderRadius: 4,\n    height: 8,\n    width: 8,\n  },\n  center: { justifyContent: 'center', alignItems: 'center' },\n  endPoint: {\n    borderRadius: 15,\n    height: 30,\n    width: 30,\n    position: 'absolute',\n    right: 0,\n    bottom: -14,\n  },\n  line: {\n    position: 'absolute',\n    marginBottom: -1,\n    height: 2,\n    borderRadius: 4,\n  },\n})\nfunction returnTrue() {\n  return true\n}\nexport default React.memo(AnalogClock)\n"]},"metadata":{},"sourceType":"module"}