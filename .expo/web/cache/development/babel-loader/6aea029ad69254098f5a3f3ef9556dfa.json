{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"animationType\", \"disableStatusBar\", \"disableStatusBarPadding\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useTheme } from 'react-native-paper';\nimport DatePickerModalContent from \"./DatePickerModalContent\";\nimport { useHeaderBackgroundColor, useHeaderColorIsLight } from \"../utils\";\nexport function DatePickerModal(props) {\n  var theme = useTheme();\n  var dimensions = useWindowDimensions();\n\n  var visible = props.visible,\n      animationType = props.animationType,\n      disableStatusBar = props.disableStatusBar,\n      disableStatusBarPadding = props.disableStatusBarPadding,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var animationTypeCalculated = animationType || Platform.select({\n    web: 'none',\n    default: 'slide'\n  });\n  var isLight = useHeaderColorIsLight();\n  var headerBackgroundColor = useHeaderBackgroundColor();\n  return React.createElement(View, {\n    style: [StyleSheet.absoluteFill],\n    pointerEvents: \"box-none\"\n  }, React.createElement(Modal, {\n    animationType: animationTypeCalculated,\n    transparent: true,\n    visible: visible,\n    onRequestClose: rest.onDismiss,\n    presentationStyle: \"overFullScreen\",\n    supportedOrientations: supportedOrientations,\n    statusBarTranslucent: true\n  }, React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: rest.onDismiss\n  }, React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalBackground, {\n      backgroundColor: theme.colors.backdrop\n    }]\n  })), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalRoot],\n    pointerEvents: \"box-none\"\n  }, React.createElement(View, {\n    style: [styles.modalContent, {\n      backgroundColor: theme.colors.surface\n    }, dimensions.width > 650 ? styles.modalContentBig : null]\n  }, disableStatusBar ? null : React.createElement(StatusBar, {\n    translucent: true,\n    barStyle: isLight ? 'dark-content' : 'light-content'\n  }), disableStatusBarPadding ? null : React.createElement(View, {\n    style: [{\n      height: StatusBar.currentHeight,\n      backgroundColor: headerBackgroundColor\n    }]\n  }), React.createElement(DatePickerModalContent, _extends({}, rest, {\n    disableSafeTop: disableStatusBar\n  })))))));\n}\nvar supportedOrientations = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];\nvar styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  modalBackground: {\n    flex: 1\n  },\n  modalContent: {\n    flex: 1,\n    width: '100%'\n  },\n  modalContentBig: {\n    maxWidth: 600,\n    maxHeight: 800,\n    borderRadius: 10,\n    width: '100%',\n    overflow: 'hidden'\n  }\n});\nexport default React.memo(DatePickerModal);","map":{"version":3,"sources":["DatePickerModal.tsx"],"names":["theme","useTheme","dimensions","useWindowDimensions","rest","animationTypeCalculated","animationType","web","default","isLight","useHeaderColorIsLight","headerBackgroundColor","useHeaderBackgroundColor","StyleSheet","onDismiss","styles","backgroundColor","backdrop","surface","disableStatusBar","disableStatusBarPadding","height","StatusBar","supportedOrientations","modalRoot","justifyContent","alignItems","flex","modalBackground","modalContent","width","modalContentBig","maxWidth","maxHeight","borderRadius","overflow","React"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {\n  Modal,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  useWindowDimensions,\n  View,\n  Platform,\n  StatusBar,\n} from 'react-native'\n\nimport { useTheme } from 'react-native-paper'\nimport DatePickerModalContent, {\n  DatePickerModalContentMultiProps,\n  DatePickerModalContentRangeProps,\n  DatePickerModalContentSingleProps,\n} from './DatePickerModalContent'\nimport { useHeaderBackgroundColor, useHeaderColorIsLight } from '../utils'\n\ninterface DatePickerModalProps {\n  visible: boolean\n  animationType?: 'slide' | 'fade' | 'none'\n  disableStatusBar?: boolean\n  disableStatusBarPadding?: boolean\n}\n\nexport interface DatePickerModalSingleProps\n  extends DatePickerModalContentSingleProps,\n    DatePickerModalProps {}\n\nexport interface DatePickerModalMultiProps\n  extends DatePickerModalContentMultiProps,\n    DatePickerModalProps {}\n\nexport interface DatePickerModalRangeProps\n  extends DatePickerModalContentRangeProps,\n    DatePickerModalProps {}\n\nexport function DatePickerModal(\n  props:\n    | DatePickerModalRangeProps\n    | DatePickerModalSingleProps\n    | DatePickerModalMultiProps\n) {\n  const theme = useTheme()\n  const dimensions = useWindowDimensions()\n  const {\n    visible,\n    animationType,\n    disableStatusBar,\n    disableStatusBarPadding,\n    ...rest\n  } = props\n  const animationTypeCalculated =\n    animationType ||\n    Platform.select({\n      web: 'none',\n      default: 'slide',\n    })\n\n  const isLight = useHeaderColorIsLight()\n  const headerBackgroundColor = useHeaderBackgroundColor()\n\n  return (\n    <View style={[StyleSheet.absoluteFill]} pointerEvents=\"box-none\">\n      <Modal\n        animationType={animationTypeCalculated}\n        transparent={true}\n        visible={visible}\n        onRequestClose={rest.onDismiss}\n        presentationStyle=\"overFullScreen\"\n        supportedOrientations={supportedOrientations}\n        //@ts-ignore\n        statusBarTranslucent={true}\n      >\n        <>\n          <TouchableWithoutFeedback onPress={rest.onDismiss}>\n            <View\n              style={[\n                StyleSheet.absoluteFill,\n                styles.modalBackground,\n                { backgroundColor: theme.colors.backdrop },\n              ]}\n            />\n          </TouchableWithoutFeedback>\n          <View\n            style={[StyleSheet.absoluteFill, styles.modalRoot]}\n            pointerEvents=\"box-none\"\n          >\n            <View\n              style={[\n                styles.modalContent,\n                { backgroundColor: theme.colors.surface },\n                dimensions.width > 650 ? styles.modalContentBig : null,\n              ]}\n            >\n              {disableStatusBar ? null : (\n                <StatusBar\n                  translucent={true}\n                  barStyle={isLight ? 'dark-content' : 'light-content'}\n                />\n              )}\n              {disableStatusBarPadding ? null : (\n                <View\n                  style={[\n                    {\n                      height: StatusBar.currentHeight,\n                      backgroundColor: headerBackgroundColor,\n                    },\n                  ]}\n                />\n              )}\n              <DatePickerModalContent\n                {...rest}\n                disableSafeTop={disableStatusBar}\n              />\n            </View>\n          </View>\n        </>\n      </Modal>\n    </View>\n  )\n}\nconst supportedOrientations: any = [\n  'portrait',\n  'portrait-upside-down',\n  'landscape',\n  'landscape-left',\n  'landscape-right',\n]\n\nconst styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  modalBackground: {\n    flex: 1,\n  },\n  modalContent: {\n    flex: 1,\n    width: '100%',\n  },\n  modalContentBig: {\n    maxWidth: 600,\n    maxHeight: 800,\n    borderRadius: 10,\n    width: '100%',\n    overflow: 'hidden',\n  },\n})\n\nexport default React.memo(DatePickerModal)\n"]},"metadata":{},"sourceType":"module"}