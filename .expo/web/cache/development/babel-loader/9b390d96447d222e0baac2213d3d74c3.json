{"ast":null,"code":"import * as React from 'react';\nimport { Text, TouchableRipple } from 'react-native-paper';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DayRange from \"./DayRange\";\nimport { daySize } from \"./dateUtils\";\n\nfunction EmptyDayPure() {\n  return React.createElement(View, {\n    style: styles.empty\n  });\n}\n\nexport var EmptyDay = React.memo(EmptyDayPure);\n\nfunction Day(props) {\n  var day = props.day,\n      month = props.month,\n      year = props.year,\n      selected = props.selected,\n      inRange = props.inRange,\n      leftCrop = props.leftCrop,\n      rightCrop = props.rightCrop,\n      onPressDate = props.onPressDate,\n      primaryColor = props.primaryColor,\n      selectColor = props.selectColor,\n      isToday = props.isToday,\n      disabled = props.disabled,\n      textColorOnPrimary = props.textColorOnPrimary,\n      theme = props.theme;\n  var onPress = React.useCallback(function () {\n    onPressDate(new Date(year, month, day));\n  }, [onPressDate, year, month, day]);\n  var borderColor = selected || inRange && theme.dark ? textColorOnPrimary : theme.dark ? '#fff' : '#000';\n  var textColor = selected || inRange && theme.dark ? textColorOnPrimary : undefined;\n  return React.createElement(View, {\n    style: [styles.root, disabled && styles.disabled]\n  }, React.createElement(DayRange, {\n    inRange: inRange,\n    leftCrop: leftCrop,\n    rightCrop: rightCrop,\n    selectColor: selectColor\n  }), React.createElement(TouchableRipple, {\n    testID: \"react-native-paper-dates-day-\" + year + \"-\" + month + \"-\" + day,\n    disabled: disabled,\n    borderless: true,\n    onPress: disabled ? undefined : onPress,\n    style: [styles.button, {\n      backgroundColor: inRange ? selectColor : undefined\n    }],\n    accessibilityRole: \"button\"\n  }, React.createElement(View, {\n    style: [styles.day, isToday ? {\n      borderColor: borderColor\n    } : null, selected ? {\n      backgroundColor: primaryColor\n    } : null]\n  }, React.createElement(Text, {\n    style: textColor ? {\n      color: textColor\n    } : undefined,\n    selectable: false\n  }, day))));\n}\n\nvar styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0\n  },\n  disabled: {\n    opacity: 0.3\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative'\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent'\n  },\n  flex1: {\n    flex: 1\n  }\n});\nexport default React.memo(Day);","map":{"version":3,"sources":["Day.tsx"],"names":["styles","empty","EmptyDay","React","theme","onPress","onPressDate","borderColor","selected","inRange","textColor","disabled","selectColor","year","month","backgroundColor","undefined","isToday","primaryColor","color","flex","flexBasis","opacity","root","justifyContent","alignItems","position","button","width","height","overflow","borderRadius","daySize","day","borderWidth","flex1"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DarkTheme, Text, TouchableRipple } from 'react-native-paper'\nimport { StyleSheet, View } from 'react-native'\nimport DayRange from './DayRange'\nimport { daySize } from './dateUtils'\n\nfunction EmptyDayPure() {\n  return <View style={styles.empty} />\n}\nexport const EmptyDay = React.memo(EmptyDayPure)\n\nfunction Day(props: {\n  theme: typeof DarkTheme\n  textColorOnPrimary: string\n  day: number\n  month: number\n  year: number\n  selected: boolean\n  inRange: boolean\n  leftCrop: boolean\n  rightCrop: boolean\n  primaryColor: string\n  selectColor: string\n  isToday: boolean\n  disabled: boolean\n  onPressDate: (date: Date) => any\n}) {\n  const {\n    day,\n    month,\n    year,\n    selected,\n    inRange,\n    leftCrop,\n    rightCrop,\n    onPressDate,\n    primaryColor,\n    selectColor,\n    isToday,\n    disabled,\n    textColorOnPrimary,\n    theme,\n  } = props\n  // console.log(month, { day })\n  const onPress = React.useCallback(() => {\n    onPressDate(new Date(year, month, day))\n  }, [onPressDate, year, month, day])\n\n  const borderColor =\n    selected || (inRange && theme.dark)\n      ? textColorOnPrimary\n      : theme.dark\n      ? '#fff'\n      : '#000'\n  const textColor =\n    selected || (inRange && theme.dark) ? textColorOnPrimary : undefined\n\n  return (\n    <View style={[styles.root, disabled && styles.disabled]}>\n      <DayRange\n        inRange={inRange}\n        leftCrop={leftCrop}\n        rightCrop={rightCrop}\n        selectColor={selectColor}\n      />\n\n      <TouchableRipple\n        testID={`react-native-paper-dates-day-${year}-${month}-${day}`}\n        disabled={disabled}\n        borderless={true}\n        onPress={disabled ? undefined : onPress}\n        style={[\n          styles.button,\n          { backgroundColor: inRange ? selectColor : undefined },\n        ]}\n        accessibilityRole=\"button\"\n      >\n        <View\n          style={[\n            styles.day,\n            isToday ? { borderColor: borderColor } : null,\n            selected ? { backgroundColor: primaryColor } : null,\n          ]}\n        >\n          <Text\n            style={textColor ? { color: textColor } : undefined}\n            selectable={false}\n          >\n            {day}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0,\n  },\n  disabled: {\n    opacity: 0.3,\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2,\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent',\n  },\n  flex1: {\n    flex: 1,\n  },\n})\n\nexport default React.memo(Day)\n"]},"metadata":{},"sourceType":"module"}